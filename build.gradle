group 'fr.xebia.jpthiery'
version '1.0.0-SNAPSHOT'

apply plugin: 'groovy'
apply plugin: 'java'
apply plugin: 'idea'

ext {
  jobDslVersion = '1.66'
  jenkinsVersion = '2.60.2'
}

defaultTasks 'cleanAll', 'test', 'libs'

sourceSets {
  jobs {
    groovy {
      srcDirs 'jobs/src/main/groovy'
      compileClasspath += main.compileClasspath
    }
    resources {
      srcDir 'jobs/src/main/resources'
    }
    compileClasspath += sourceSets.main.output
    runtimeClasspath += sourceSets.main.output
  }

}

repositories {
  mavenCentral()

  def jenkinsRepo = 'http://repo.jenkins-ci.org/releases/'
  jcenter { artifactUrls jenkinsRepo }
  maven { url jenkinsRepo }
}

configurations {
  libs
  testPlugins {}
}

// Exclude buggy Xalan dependency this way the JRE default TransformerFactory is used
// The xalan pulled in by htmlunit does not properly deal with spaces folder / job names
configurations.all*.exclude group: 'xalan'

dependencies {
  compile 'org.codehaus.groovy:groovy-all:2.4.7'
  compile "org.jenkins-ci.plugins:job-dsl-core:${jobDslVersion}"

  testCompile 'org.spockframework:spock-core:1.0-groovy-2.4'
  testCompile 'cglib:cglib-nodep:2.2.2' // used by Spock

  // Jenkins test harness dependencies
  testCompile 'org.jenkins-ci.main:jenkins-test-harness:2.8'
  testCompile "org.jenkins-ci.main:jenkins-war:${jenkinsVersion}"
  testCompile "org.jenkins-ci.main:jenkins-war:${jenkinsVersion}:war-for-test@jar"

  // Job DSL plugin including plugin dependencies
  testCompile "org.jenkins-ci.plugins:job-dsl:${jobDslVersion}"
  testCompile "org.jenkins-ci.plugins:job-dsl:${jobDslVersion}@jar"
  testCompile 'org.jenkins-ci.plugins:structs:1.2@jar'
  testCompile 'org.jenkins-ci.plugins:cloudbees-folder:5.0@jar'
  testPlugins 'org.jenkins-ci.plugins:ansicolor:0.5.2'

  testPlugins 'org.jenkins-ci.plugins:credentials:2.1.15'
  testPlugins 'org.jenkins-ci.plugins:envinject:1.92'
  testPlugins 'org.jenkins-ci.plugins:slack:2.3'
  testPlugins 'org.jenkins-ci.plugins:build-monitor-plugin:1.7+build.172'

  testPlugins 'org.jenkins-ci.plugins:pipeline-build-step:2.4'
  testPlugins 'org.jenkins-ci.plugins:pipeline-graph-analysis:1.1'
  testPlugins 'org.jenkins-ci.plugins:pipeline-input-step:2.5'
  testPlugins 'org.jenkins-ci.plugins.pipeline-stage-view:pipeline-rest-api:2.4'
  testPlugins 'org.jenkins-ci.plugins:pipeline-stage-step:2.2'
  testPlugins 'org.jenkins-ci.plugins.pipeline-stage-view:pipeline-stage-view:2.8'

  testPlugins 'org.jenkins-ci.plugins.workflow:workflow-api:2.7'
  testPlugins 'org.jenkins-ci.plugins.workflow:workflow-aggregator:2.5'
  testPlugins 'org.jenkins-ci.plugins.workflow:workflow-basic-steps:2.3'
  testPlugins 'org.jenkins-ci.plugins.workflow:workflow-cps:2.24'
  testPlugins 'org.jenkins-ci.plugins.workflow:workflow-cps-global-lib:2.5'
  testPlugins 'org.jenkins-ci.plugins.workflow:workflow-durable-task-step:2.8'
  testPlugins 'org.jenkins-ci.plugins.workflow:workflow-job:2.9'
  testPlugins 'org.jenkins-ci.plugins.workflow:workflow-multibranch:2.9.2'
  testPlugins 'org.jenkins-ci.plugins.workflow:workflow-scm-step:2.3'
  testPlugins 'org.jenkins-ci.plugins.workflow:workflow-step-api:2.7'
  testPlugins 'org.jenkins-ci.plugins.workflow:workflow-support:2.12'

  // plugins to install in test instance
  testPlugins 'jp.ikedam.jenkins.plugins:extensible-choice-parameter:1.4.1'
  testPlugins 'org.jenkins-ci.plugins:cloudbees-folder:5.0'

  // for the RestApiScriptRunner
  compile('org.codehaus.groovy.modules.http-builder:http-builder:0.7.2') {
    exclude(module: 'groovy')
  }

  // for the RestApiScriptRunner
  compile('org.apache.ant:ant:1.9.7')
}

task cleanAll() {
  delete 'lib'
}

task resolveTestPlugins(type: Copy) {
  from configurations.testPlugins
  into new File(sourceSets.test.output.resourcesDir, 'test-dependencies')
  include '*.hpi'
  include '*.jpi'
  def mapping = [:]

  doFirst {
    configurations.testPlugins.resolvedConfiguration.resolvedArtifacts.each {
      mapping[it.file.name] = "${it.name}.${it.extension}"
    }
  }
  rename { mapping[it] }

  doLast {
    List<String> baseNames = source*.name.collect { mapping[it] }.collect { it[0..it.lastIndexOf('.') - 1] }
    new File(destinationDir, 'index').setText(baseNames.join('\n'), 'UTF-8')
  }
}

task libs(type: Copy) {
  into 'lib'
  from configurations.libs
}
/*
task rest(dependsOn: 'classes', type: JavaExec) {
    main = 'io.kodokojo.rest.RestApiScriptRunner'
    classpath = sourceSets.main.runtimeClasspath
    systemProperties System.getProperties()
}
*/

test {
  dependsOn tasks.resolveTestPlugins
  inputs.files sourceSets.jobs.groovy.srcDirs

  // set build directory for Jenkins test harness, JENKINS-26331
  systemProperty 'buildDirectory', project.buildDir.absolutePath
}

task wrapper(type: Wrapper) {
  gradleVersion = '3.4.1'
}
